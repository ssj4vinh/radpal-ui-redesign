import os
import re
from elevenlabs import generate, save, set_api_key

# üîë API Setup
# Get API key from environment variable or replace with your key
api_key = os.environ.get("ELEVENLABS_API_KEY", "your_api_key_here")
set_api_key(api_key)

voice_name = "TX3LPaxmHKxFdv7VOQHJ"  # Replace with your voice ID
model = "eleven_monolingual_v1"

# üìÅ Paths
input_dir = "/Users/vinh/Desktop/voice_datasets/MRI_ankle/spoken"
output_dir = "/Users/vinh/Desktop/voice_datasets/MRI_ankle/wav"
os.makedirs(output_dir, exist_ok=True)

# üß† IPA phoneme replacements using SSML
custom_pronunciations = {
    "Talocalcaneal": '<phoneme alphabet="ipa" ph="Àåte…™.lo ä.k√¶lÀàke…™.ni.…ôl">Talocalcaneal</phoneme>',
    "Fascia": '<phoneme alphabet="ipa" ph="Ààf√¶ É.…ô">Fascia</phoneme>',
    "Talofibular": '<phoneme alphabet="ipa" ph="Àåte…™.lo äÀàf…™b.j…ô.l…ö">Talofibular</phoneme>',
    "Peroneus": '<phoneme alphabet="ipa" ph="Àåp…õ…π.o äÀàni.…ôs">Peroneus</phoneme>',
    "Peroneal": '<phoneme alphabet="ipa" ph="Àåp…õ…π.o äÀàni.…ôl">Peroneal</phoneme>',
    "Posterior": '<phoneme alphabet="ipa" ph="Ààpo ä.st…™.…πi.…ö">Posterior</phoneme>',
    "Tear": '<phoneme alphabet="ipa" ph="Ààt…õ…ô…π">Tear</phoneme>',
    "Tibiofibular": '<phoneme alphabet="ipa" ph="Àåt…™.bi.o äÀàf…™b.j…ô.l…ö">Tibiofibular</phoneme>',
    "Brevis": '<phoneme alphabet="ipa" ph="Ààbr…õ.v…™s">Brevis</phoneme>',
    "Talar": '<phoneme alphabet="ipa" ph="Ààte…™.l…ö">Talar</phoneme>',
    "Talus": '<phoneme alphabet="ipa" ph="Ààte…™.l…™s">Talus</phoneme>',
    "Plafond": '<phoneme alphabet="ipa" ph="pl…ôÀàf…índ">Plafond</phoneme>',
    "Subtalar": '<phoneme alphabet="ipa" ph="Àås åbÀàte…™.l…ö">Subtalar</phoneme>',
    "Tibiotalar": '<phoneme alphabet="ipa" ph="Àåt…™.bi.o äÀàte…™.l…ö">Tibiotalar</phoneme>',
    "1.5": '<phoneme alphabet="ipa" ph="w ån p…î…™nt fa…™v">1.5</phoneme>',
    "2.5": '<phoneme alphabet="ipa" ph="tu p…î…™nt fa…™v">2.5</phoneme>',
    "3.5": '<phoneme alphabet="ipa" ph="Œ∏…πi p…î…™nt fa…™v">3.5</phoneme>',

    "Calcaneocuboid": '<phoneme alphabet="ipa" ph="Àåk√¶l.ke…™.ni.o äÀàkjuÀê.b…î…™d">Calcaneocuboid</phoneme>',
    "calcaneo-cuboid": '<phoneme alphabet="ipa" ph="Àåk√¶l.ke…™.ni.o äÀàkjuÀê.b…î…™d">calcaneo-cuboid</phoneme>',
    "Tenosynovitis": '<phoneme alphabet="ipa" ph="ÀåtiÀê.no ä.s…™.n…ôÀàva…™.t…™s">Tenosynovitis</phoneme>',
    "Talonavicular": '<phoneme alphabet="ipa" ph="Àåte…™.lo ä.n…ôÀàv…™k.j…ô.l…ö">Talonavicular</phoneme>',
    "coronal": '<phoneme alphabet="ipa" ph="k…î…π ån ål">coronal</phoneme>'
}


def preprocess_text(text):
    for word, replacement in custom_pronunciations.items():
        pattern = re.compile(re.escape(word), re.IGNORECASE)
        text = pattern.sub(replacement, text)
    return text

# üîÅ Loop and synthesize
for filename in os.listdir(input_dir):
    if filename.endswith(".txt"):
        txt_path = os.path.join(input_dir, filename)
        wav_filename = filename.replace(".txt", ".wav")
        wav_path = os.path.join(output_dir, wav_filename)

        if os.path.exists(wav_path):
            print(f"‚è≠Ô∏è Skipping (already exists): {wav_filename}")
            continue

        with open(txt_path, "r") as f:
            raw_text = f.read().strip()
            text = preprocess_text(raw_text)
            text = f"<speak>{text}</speak>"  # SSML wrapper

        print(f"üé§ Synthesizing: {filename}")
        try:
            audio = generate(text=text, voice=voice_name, model=model)
            save(audio, wav_path)
        except Exception as e:
            print(f"‚ùå Error generating {filename}: {e}")

print("‚úÖ All available .wav files generated.")

def main():
    """Main entry point for command-line usage"""
    # This allows the script to be used as: radpal-generate-wavs
    # The main logic is already above
    pass

if __name__ == "__main__":
    main()
